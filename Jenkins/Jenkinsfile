pipeline {
    agent any

    options {
        disableConcurrentBuilds()
        parallelsAlwaysFailFast()
        timestamps()
        withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding', 
            credentialsId: 'f5e83b53-c9de-4429-b15d-2c4afda214cd', 
            accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) 
    }

    stages {
        stage('Plan') {
            steps {
                script {
                    try {
                        sh 'terraform init'
                        sh 'terraform plan -out=tfplan'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Error during Terraform plan: ${e.message}")
                    }
                }
            }
        }

        stage('Apply') {
            steps {
                script {
                    def userInput = input(
                        id: 'userInput',
                        message: 'Do you want to apply the plan? (Yes/No)',
                        parameters: [choice(name: 'choice', choices: 'Yes\nNo', description: '')]
                    )
                    
                    if (userInput == 'Yes') {
                        try {
                            sh 'terraform apply tfplan'
                        } catch (Exception e) {
                            currentBuild.result = 'FAILURE'
                            error("Error during Terraform apply: ${e.message}")
                        }
                    } else {
                        echo 'Skipping apply stage'
                    }
                }
            }
        }

        stage('Destroy') {
            steps {
                script {
                    def userInput = input(
                        id: 'userInput',
                        message: 'Do you want to destroy the resource? (Yes/No)',
                        parameters: [choice(name: 'choice', choices: 'Yes\nNo', description: '')]
                    )
                    
                    if (userInput == 'Yes') {
                        try {
                            sh 'terraform destroy'
                        } catch (Exception e) {
                            currentBuild.result = 'FAILURE'
                            error("Error during Terraform destroy: ${e.message}")
                        }
                    } else {
                        echo 'Skipping destroy stage'
                    }
                }
            }
        }
    }

}